@page "/"
@using HelpersLib;
@using Newtonsoft.Json;
@using SharedContracts.DataPoints;
@using SharedContracts.RestDataPoints;
@using Smarthome.Controls
@using Smarthome.Controls.Data;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.CircularGauge
@using System.Net.Http.Headers;

<h1>Hello, world!</h1>
 
<div class="container">
    <div class="row">
        <div class="col-4">
            <CircularGaugeControl DataPoint="@PVProduction" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col-4">
            <CircularGaugeControl DataPoint="@GridSupply" Color="#999900"></CircularGaugeControl>
        </div>
        <div class="col-4">
            <CircularGaugeControl DataPoint="@GridDemand" Color="#990000"></CircularGaugeControl>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <HistoryControl DataSeries="new List<HistoryChartDataSeries>{PVProductionSeries, GridSupplySeries, GridDemandSeries}" Label="Photovoltaik"></HistoryControl>
    </div>
</div>

<button @onclick="TakePhoto">Test</button>

@code
{
    public DecimalDataPoint PVProduction = new() { Label = "Produktion", Unit = "W", MaxValue = 12000, DecimalDigits = 1, History = new() { DataHistoryLength = 300 }, CurrentValueCorrection = (5.7 + 5.13) / 5.7, AutoAddCurrentValueToHistory=false };
    public DecimalDataPoint GridSupply = new() { Label = "Einspeisung", Unit = "W", MaxValue = 12000, DecimalDigits = 1, History = new() { DataHistoryLength = 300 }, AutoAddCurrentValueToHistory = false };
    public DecimalDataPoint GridDemand = new() { Label = "Bezug", Unit = "W", MaxValue = 8000, DecimalDigits = 1, History = new() { DataHistoryLength = 300 }, AutoAddCurrentValueToHistory = false };

    private Timer refreshTimer;
    private DateTime lastUpdateTimestamp = DateTime.Now.Subtract(TimeSpan.FromMinutes(10)).ToUniversalTime();

    public HistoryChartDataSeries PVProductionSeries;
    public HistoryChartDataSeries GridSupplySeries;
    public HistoryChartDataSeries GridDemandSeries;

    protected override void OnInitialized()
    {
        refreshTimer = new Timer(Refresh, null, 1, 10000);
    }

    private void Refresh(object? state)
    {
        try
        {
            var request = new HttpRequestMessage
                {
                    Method = HttpMethod.Post,
                    RequestUri = new Uri("https://smarthomestorageservice.azurewebsites.net/readpvm3data"),
                    //RequestUri = new Uri("http://localhost:5006/readpvm3data"),
                    Content = new StringContent($"\"{lastUpdateTimestamp.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}\"")
                    {
                        Headers =
                            {
                                ContentType = new MediaTypeHeaderValue("application/json")
                            }
                    }
                };
                
            lastUpdateTimestamp = DateTime.Now.ToUniversalTime();

            List<PVM3RestDataPoint> data;
            using (HttpClient Http = new HttpClient())
            {
                using (var response = Http.SendAsync(request).Result)
                {
                    response.EnsureSuccessStatusCode();
                    var body = response.Content.ReadAsStringAsync().Result;
                    data = JsonConvert.DeserializeObject<List<PVM3RestDataPoint>>(body);
                }
            }

            if (data != null)
            {
                foreach (var item in data)
                {
                    PVProduction.History.AddHistoryDataPoint(item.PVProduction, item.TimeStamp);
                    GridSupply.History.AddHistoryDataPoint(item.GridSupply, item.TimeStamp);
                    GridDemand.History.AddHistoryDataPoint(item.GridDemand, item.TimeStamp);
                }
                
                PVProduction.SetCorrectedValue(data.Last().PVProduction);
                GridSupply.SetCorrectedValue(data.Last().GridSupply);
                GridDemand.SetCorrectedValue(data.Last().GridDemand);

                PVProductionSeries = new() { DataPoint = PVProduction, Type = ChartSeriesType.Line, Color = "#009900", Opacity = 1 };
                GridSupplySeries = new() { DataPoint = GridSupply, Type = ChartSeriesType.Line, Color = "#999900", Opacity = 1 };
                GridDemandSeries = new() { DataPoint = GridDemand, Type = ChartSeriesType.Line, Color = "#990000", Opacity = 1 };

            }
                
                //Cleanup(PVDataPoints.PVProduction);
                //Cleanup(PVDataPoints.GridDemand);
                //Cleanup(PVDataPoints.GridSupply);
        }
        catch (Exception ex)
        {
            ConsoleHelpers.PrintErrorMessage("Failed to read data from StorageService, Error: " + ex.Message);
        }

        //PVProduction = new() { DataPoint = PVDataPoints.PVProduction, Type = ChartSeriesType.Line, Color = "#009900", Opacity = 1 };
        //GridSupply = new() { DataPoint = PVDataPoints.GridSupply, Type = ChartSeriesType.Line, Color = "#999900", Opacity = 1 };
        //GridDemand = new() { DataPoint = PVDataPoints.GridDemand, Type = ChartSeriesType.Line, Color = "#990000", Opacity = 1 };
        //CurrentCharging = new() { DataPoint = ChargingDataPoints.CurrentChargingPower, Type = ChartSeriesType.Line, Color = "#000099", Opacity = 1 };

        InvokeAsync(StateHasChanged);

    }

    public async void TakePhoto()
    {
        if (MediaPicker.Default.IsCaptureSupported)
        {
            FileResult photo = await MediaPicker.Default.CapturePhotoAsync();

            if (photo != null)
            {
                // save the file into local storage
                string localFilePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

                using Stream sourceStream = await photo.OpenReadAsync();
                using FileStream localFileStream = File.OpenWrite(localFilePath);

                await sourceStream.CopyToAsync(localFileStream);
            }
        }
    }
}
