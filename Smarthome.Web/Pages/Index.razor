@page "/"
@using Newtonsoft.Json
@using SharedContracts.Data
@using Smarthome.Web.Components
@using Smarthome.Web.Controllers
@using Smarthome.Web.Controls
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Charts
@using System.Diagnostics

<PageTitle>Index</PageTitle>

<h2>Photovoltaik</h2>
<div class="container">
    <div class="row">
        <div class="col">
            <CircularGaugeControl DataPoint="@PVDataPoints.PVProduction" Label="Produktion" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@PVDataPoints.GridSupply" Label="Lieferung" Color="#999900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@PVDataPoints.GridDemand" Label="Bezug" Color="#990000"></CircularGaugeControl>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="control-section" align="center">
                <SfChart Title="Photovoltaik">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="hh:mm:ss" Title="Time">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    </ChartPrimaryXAxis>
                    <ChartArea>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryYAxis Title="Leistung" Minimum="0" LabelFormat="{value}W">
                        <ChartAxisLineStyle Width="0" Color="transparent"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries Type="ChartSeriesType.Line" Name="Produktion" Width="2" DataSource="@PVDataPoints.PVProduction.History.DataHistory"
                                     XName="@nameof(HistoryDataPoint.Timestamp)" YName="@nameof(HistoryDataPoint.Value)">
                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                        </ChartSeries>
                        <ChartSeries Type="ChartSeriesType.Line" Name="Lieferung" Width="2" DataSource="@PVDataPoints.GridSupply.History.DataHistory"
                                     XName="@nameof(HistoryDataPoint.Timestamp)" YName="@nameof(HistoryDataPoint.Value)">
                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                        </ChartSeries>
                        <ChartSeries Type="ChartSeriesType.Line" Name="Bezug" Width="2" DataSource="@PVDataPoints.GridDemand.History.DataHistory"
                                     XName="@nameof(HistoryDataPoint.Timestamp)" YName="@nameof(HistoryDataPoint.Value)">
                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
                </SfChart>
            </div>
        </div>
    </div>
    <h2>Ladesäule</h2>
@*    <div class="roe">
        <div class="col">
            <label for="checked" style="padding: 10px 10px 10px 0">Überschuss-Laden</label>
            <SfSwitch @bind-Checked="@ChargingDataPoints.PVCharging.CurrentValue"></SfSwitch>
        </div>
        <div class="col">
            <label for="checked" style="padding: 10px 10px 10px 0">Mindest-Laden</label>
            <SfSwitch @bind-Checked="@dataPoints.MinimumCharging.CurrentValue"></SfSwitch>
        </div>
        <div class="col">
            <label for="checked" style="padding: 10px 10px 10px 0">Manuelle Ladekapazität</label>
            <label>@dataPoints.CarChargingManualCurrency.CurrentValue</label>
            <SfSlider TValue="double" ID="gradient_slider" Value="@dataPoints.CarChargingManualCurrency.CurrentValue" Type=SliderType.MinRange Min="0" Max="@dataPoints.CarChargingManualCurrency.MaxValue" Step="500" Width="250px">
                <SliderEvents TValue="double" OnChange="RangeStartChange" />
            </SfSlider>
            <SfButton @onclick="UpdateManualChargingCurrency">Anwenden</SfButton>
        </div>
    </div>*@
    <div class="row">
        <div class="col">
            <CircularGaugeControl DataPoint="@ChargingDataPoints.CarLatestChargingPower" Label="Lade-Leistung" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@ChargingDataPoints.CarCharingActiveSession" Label="Ladung Sitzung" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@ChargingDataPoints.CarChargingCurrentTarget" Label="Verfügbarer Ladestrom" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <DataValueControl DataPoint="@ChargingDataPoints.CarCharingTotal" Label="Ladung Gesamt"></DataValueControl>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <StatusControl DataPoint="@ChargingDataPoints.KebaStatus" Label="Status" Status="@kebaStatus"></StatusControl>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>



@*<p>Erzeugung: @dataPoints.PVProduction.CurrentValue</p>
<p>Einspeißung: @dataPoints.GridSupply.CurrentValue</p>
<p>Bezug: @dataPoints.GridDemand.CurrentValue</p>*@

<p>Zeit: @DateTime.Now</p>


@code {
    private Dictionary<int, string> kebaStatus = new() { { 0, "Warten" }, { 1, "Nicht bereit" }, { 2, "Bereit" }, { 3, "Laden" }, { 4, "Fehler" }, { 5, "Unterbrochen" } };
    public PVDataPoints PVDataPoints = new PVDataPoints();
    public ChargingDataPoints ChargingDataPoints = new ChargingDataPoints();

    private Timer refreshTimer;

    protected override void OnInitialized()
    {
        refreshTimer = new Timer(Refresh, null, 1000, 1000);
    }

    //private void UpdateManualChargingCurrency()
    //{
    //    chargingController.MinCharging = dataPoints.MinimumCharging.CurrentValue;
    //    chargingController.AutoCharging = dataPoints.PVCharging.CurrentValue;
    //    chargingController.ManualChargingCurrency = dataPoints.CarChargingManualCurrency.CurrentValue;
    //}

    //private void RangeStartChange(Syncfusion.Blazor.Inputs.SliderChangeEventArgs<double> args)
    //{
    //    if (dataPoints.CarChargingManualCurrency.CurrentValue != (int)args.Value)
    //    {
    //        dataPoints.CarChargingManualCurrency.CurrentValue = (int)args.Value;
    //    }
    //}

    private void Refresh(object? state)
    {
        try
        {
            HttpClient Http = new HttpClient();
            string baseUrl = "http://localhost:5003";
            var jsonString = Http.GetStringAsync($"{baseUrl}/readSensorsdata").Result;
            PVDataPoints = JsonConvert.DeserializeObject<PVDataPoints>(jsonString);
            PVDataPoints.PVProduction.History.DataHistory.RemoveAt(0);
            PVDataPoints.GridDemand.History.DataHistory.RemoveAt(0);
            PVDataPoints.GridSupply.History.DataHistory.RemoveAt(0);
            baseUrl = "http://localhost:5004";
            jsonString = Http.GetStringAsync($"{baseUrl}/readdata").Result;
            ChargingDataPoints = JsonConvert.DeserializeObject<ChargingDataPoints>(jsonString);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Failed to read data from service, Error: " + ex.Message);
        }

    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}


