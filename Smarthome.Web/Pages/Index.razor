@page "/"

@using HelpersLib
@using Newtonsoft.Json
@using Smarthome.Web.Controls
@using Smarthome.Web.Data
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Charts
@using System.Diagnostics

<PageTitle>Index</PageTitle>
<h2>Photovoltaik</h2>

<div class="container">
    <div class="row">
        <div class="col-4">
            <CircularGaugeControl DataPoint="@PVDataPoints.PVProduction" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col-4">
            <CircularGaugeControl DataPoint="@PVDataPoints.GridSupply" Color="#999900"></CircularGaugeControl>
        </div>
        <div class="col-4">
            <CircularGaugeControl DataPoint="@PVDataPoints.GridDemand" Color="#990000"></CircularGaugeControl>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <HistoryControl DataSeries="new List<HistoryChartDataSeries>{PVProduction, GridSupply, GridDemand, CurrentCharging}" Label="Photovoltaik"></HistoryControl>
        </div>
    </div>
    <h2>Ladesäule</h2>
    <div class="row">
        <div class="col">
            <CircularGaugeControl DataPoint="@ChargingDataPoints.CurrentChargingPower" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@ChargingDataPoints.ConsumptionActiveSession" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@ChargingDataPoints.EffectiveMaximumChargingCurrency" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <DataValueControl DataPoint="@ChargingDataPoints.CharingOverallTotal" Label="Ladung Gesamt"></DataValueControl>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <StatusControl DataPoint="@ChargingDataPoints.KebaStatus" Label="Status" Status="@kebaStatus"></StatusControl>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<p>Zeit: @DateTime.Now</p>


@code {
    private Dictionary<int, string> kebaStatus = new() { { 0, "Warten" }, { 1, "Nicht bereit" }, { 2, "Bereit" }, { 3, "Laden" }, { 4, "Fehler" }, { 5, "Unterbrochen" } };
    public PVDataPoints PVDataPoints = new PVDataPoints();
    public ChargingDataPoints ChargingDataPoints = new ChargingDataPoints();

    private Timer refreshTimer;

    public HistoryChartDataSeries PVProduction;
    public HistoryChartDataSeries GridSupply;
    public HistoryChartDataSeries GridDemand;
    public HistoryChartDataSeries CurrentCharging;

    protected override void OnInitialized()
    {
        refreshTimer = new Timer(Refresh, null, 1000, 1000);
    }

    private void Refresh(object? state)
    {
        try
        {
            HttpClient Http = new HttpClient();
            var jsonString = Http.GetStringAsync($"http://localhost:5003/readSensorsdata").Result;
            PVDataPoints = JsonConvert.DeserializeObject<PVDataPoints>(jsonString);
            PVDataPoints.PVProduction.History.DataHistory.RemoveAt(0);
            PVDataPoints.GridDemand.History.DataHistory.RemoveAt(0);
            PVDataPoints.GridSupply.History.DataHistory.RemoveAt(0);
            jsonString = Http.GetStringAsync("http://localhost:5004/readdata").Result;
            ChargingDataPoints = JsonConvert.DeserializeObject<ChargingDataPoints>(jsonString);
            if (ChargingDataPoints.CurrentChargingPower.History.DataHistory.Count > 1)
            {
                ChargingDataPoints.CurrentChargingPower.History.DataHistory.RemoveAt(0);
            }
            PVProduction = new() { DataPoint = PVDataPoints.PVProduction, Type = ChartSeriesType.Line, Color = "#009900", Opacity = 1 };
            GridSupply = new() { DataPoint = PVDataPoints.GridSupply, Type = ChartSeriesType.Line, Color = "#999900", Opacity = 1 };
            GridDemand = new() { DataPoint = PVDataPoints.GridDemand, Type = ChartSeriesType.Line, Color = "#990000", Opacity = 1 };
            CurrentCharging = new() { DataPoint = ChargingDataPoints.CurrentChargingPower, Type = ChartSeriesType.Line, Color = "#000099", Opacity = 1 };

            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            ConsoleHelpers.PrintErrorMessage("Failed to read data from service, Error: " + ex.Message);
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}


