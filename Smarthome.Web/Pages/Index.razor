@page "/"
@using Smarthome.Web.Components
@using Smarthome.Web.Controllers
@using Smarthome.Web.Data
@using Smarthome.Web.Controls
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs

@inject PowerDogDeviceConnector powerDogDeviceConnector;
@inject ChargingController chargingController;
@inject DataPoints dataPoints;

<PageTitle>Index</PageTitle>

<h2>Photovoltaik</h2>
<div class="container">
    <div class="row">
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.PVProduction" Label="Produktion" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.GridSupply" Label="Lieferung" Color="#999900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.GridDemand" Label="Bezug" Color="#990000"></CircularGaugeControl>
        </div>
    </div>
    <h2>Ladesäule</h2>
    <div class="roe">
        <div class="col">
            <label for="checked" style="padding: 10px 10px 10px 0">Überschuss-Laden</label>
            <SfSwitch @bind-Checked="@dataPoints.PVCharging.CurrentValue"></SfSwitch>
        </div>
        <div class="col">
            <label for="checked" style="padding: 10px 10px 10px 0">Mindest-Laden</label>
            <SfSwitch @bind-Checked="@dataPoints.MinimumCharging.CurrentValue"></SfSwitch>
        </div>
        <div class="col">
            <label for="checked" style="padding: 10px 10px 10px 0">Manuelle Ladekapazität</label>
            <label>@dataPoints.CarChargingManualCurrency.CurrentValue</label>
            <SfSlider TValue="double" ID="gradient_slider" Value="@dataPoints.CarChargingManualCurrency.CurrentValue" Type=SliderType.MinRange Min="0" Max="@dataPoints.CarChargingManualCurrency.MaxValue" Step="500" Width="250px">
                <SliderEvents TValue="double" OnChange="RangeStartChange" />
            </SfSlider>
            <SfButton @onclick="UpdateManualChargingCurrency">Anwenden</SfButton>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.CarLatestChargingPower" Label="Lade-Leistung" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.CarCharingActiveSession" Label="Ladung aktuelle Sitzung" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.CarChargingCurrentTarget" Label="Verfügbarer Ladestrom" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <DataValueControl DataPoint="@dataPoints.CarCharingTotal" Label="Ladung Gesamt"></DataValueControl>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <StatusControl DataPoint="@dataPoints.KebaStatus" Label="Status" Status="@kebaStatus"></StatusControl>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>



@*<p>Erzeugung: @dataPoints.PVProduction.CurrentValue</p>
<p>Einspeißung: @dataPoints.GridSupply.CurrentValue</p>
<p>Bezug: @dataPoints.GridDemand.CurrentValue</p>*@

<p>Zeit: @DateTime.Now</p>


@code {
    private Dictionary<int, string> kebaStatus = new() { { 0, "Warten" }, { 1, "Nicht bereit" }, { 2, "Bereit" }, { 3, "Laden" }, { 4, "Fehler" }, { 5, "Unterbrochen" } };
    //public PowerDogDeviceConnector powerDogDeviceConnector = new PowerDogDeviceConnector();
    //public DataPoints dataPoints = new DataPoints();

    private Timer refreshTimer;

    protected override void OnInitialized()
    {
        //powerDogDeviceConnector.InitializePowerDogDeviceConnector(new UriBuilder("http", "192.168.178.150", 20000).Uri, PowerDogSecrets.Password, TimeSpan.FromSeconds(1));
        //dataPoints.InitializeDataPoints(powerDogDeviceConnector);
        refreshTimer = new Timer(Refresh, null, 1000, 1000);
    }

    private void UpdateManualChargingCurrency()
    {
        chargingController.MinCharging = dataPoints.MinimumCharging.CurrentValue;
        chargingController.AutoCharging = dataPoints.PVCharging.CurrentValue;
        chargingController.ManualChargingCurrency = dataPoints.CarChargingManualCurrency.CurrentValue;
    }
    
    private void RangeStartChange(Syncfusion.Blazor.Inputs.SliderChangeEventArgs<double> args)
    {
        if (dataPoints.CarChargingManualCurrency.CurrentValue != (int)args.Value)
        {
            dataPoints.CarChargingManualCurrency.CurrentValue = (int)args.Value;
        }
    }

    private void Refresh(object? state)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}


