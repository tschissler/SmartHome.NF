@page "/"
@using Secrets
@using Smarthome.Web.Components
@using Smarthome.Web.Data
@using Smarthome.Web.Controls

@*@inject PowerDogDeviceConnector powerDogDeviceConnector;
@inject DataPoints dataPoints;*@

<PageTitle>Index</PageTitle>

<h1>Photovoltaik</h1>
<div class="container">
    <div class="row">
        <div class="col">
            <DataValueControl DataPoint="@dataPoints.PVProduction" Label="Produktion"></DataValueControl>
        </div>
        <div class="col">
            <DataValueControl DataPoint="@dataPoints.GridSupply" Label="Lieferung"></DataValueControl>
        </div>
        <div class="col">
            <DataValueControl DataPoint="@dataPoints.GridDemand" Label="Bezug"></DataValueControl>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.PVProduction" Label="Produktion" Color="#009900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.GridSupply" Label="Lieferung" Color="#999900"></CircularGaugeControl>
        </div>
        <div class="col">
            <CircularGaugeControl DataPoint="@dataPoints.GridDemand" Label="Bezug" Color="#990000"></CircularGaugeControl>
        </div>
    </div>
</div>



@*<p>Erzeugung: @dataPoints.PVProduction.CurrentValue</p>
<p>Einspeißung: @dataPoints.GridSupply.CurrentValue</p>
<p>Bezug: @dataPoints.GridDemand.CurrentValue</p>*@

<p>Zeit: @DateTime.Now</p>


@code {
    public PowerDogDeviceConnector powerDogDeviceConnector = new PowerDogDeviceConnector();
    public DataPoints dataPoints = new DataPoints();

    private Timer refreshTimer;

    protected override void OnInitialized()
    {
        powerDogDeviceConnector.InitializePowerDogDeviceConnector(new UriBuilder("http", "192.168.178.150", 20000).Uri, PowerDogSecrets.Password, TimeSpan.FromSeconds(1));
        dataPoints.InitializeDataPoints(powerDogDeviceConnector);
        refreshTimer = new Timer(Refresh, null, 1000, 1000);
    }

    private void Refresh(object? state)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}


