@page "/EnergyM3"
@using HelpersLib
@using Newtonsoft.Json
@using Smarthome.Web.Data;
@using Syncfusion.Blazor.Charts
@implements IDisposable

<h3>Energieübersicht M3</h3>
<div class="container">
    <div class="row">
        <div class="col-4">
            <CircularGaugeControl DataPoint="@SelfConsumption" ValueFactor=0.001 CustomUnit="KW" Color="#999900"></CircularGaugeControl>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <HistoryControl DataSeries="new List<HistoryChartDataSeries>{SelfProductionSeries, SelfConsumptionSeries}" Label="Verbrauch M3"></HistoryControl>
        </div>
    </div>
</div>

<p>Zeit: @DateTime.Now</p>

@code {
    public PVDataPoints PVDataPoints = new PVDataPoints();
    public ChargingDataPoints ChargingDataPoints = new ChargingDataPoints();
    public DecimalDataPoint SelfConsumption = new() { Label = "Verbrauch", Unit = "W", MaxValue = 6000, DecimalDigits=1, History = new() { DataHistoryLength = 500 } };
    public DecimalDataPoint SelfProduction = new() { Label = "PV-Strom", Unit = "W", MaxValue = 6000, DecimalDigits = 1, History = new() { DataHistoryLength = 500 } };

    public HistoryChartDataSeries SelfConsumptionSeries;
    public HistoryChartDataSeries SelfProductionSeries;

    private Timer refreshTimer;

    protected override void OnInitialized()
    {
        SelfConsumptionSeries = new() { DataPoint = SelfConsumption, Type = ChartSeriesType.Area, Color="#999900", Opacity=0.4 };
        SelfProductionSeries = new() { DataPoint = SelfProduction, Type = ChartSeriesType.Line, Color = "#009900", Opacity=1 };
        refreshTimer = new Timer(Refresh, null, 2000, 2000);
    }

    private void Refresh(object? state)
    {
        try
        {
            using (HttpClient Http = new HttpClient())
            {
                var jsonString = Http.GetStringAsync($"http://localhost:5003/readSensorsdata").Result;
                PVDataPoints = JsonConvert.DeserializeObject<PVDataPoints>(jsonString);
                PVDataPoints.PVProduction.History.DataHistory.RemoveAt(0);
                PVDataPoints.GridDemand.History.DataHistory.RemoveAt(0);
                PVDataPoints.GridSupply.History.DataHistory.RemoveAt(0);
                jsonString = Http.GetStringAsync("http://localhost:5004/readdata").Result;
                ChargingDataPoints = JsonConvert.DeserializeObject<ChargingDataPoints>(jsonString);
                SelfConsumption.SetCorrectedValue(PVDataPoints.PVProduction.CurrentValue - PVDataPoints.GridSupply.CurrentValue + PVDataPoints.GridDemand.CurrentValue - ChargingDataPoints.CurrentChargingPower.CurrentValue);
                SelfProduction.SetCorrectedValue(PVDataPoints.PVProduction.CurrentValue > SelfConsumption.CurrentValue ? SelfConsumption.CurrentValue : PVDataPoints.PVProduction.CurrentValue);
                InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            ConsoleHelpers.PrintErrorMessage("Failed to read data from PV Service or Charging Service on EnergyM3, Error: " + ex.Message);
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
