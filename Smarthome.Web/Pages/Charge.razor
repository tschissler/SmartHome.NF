@page "/charge"

@using HelpersLib
@using Newtonsoft.Json
@using SharedContracts
@using SharedContracts.DataPointCollections
@using SharedContracts.DataPoints
@using Smarthome.Web.Controls
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using System.Diagnostics

<h3>Lade-Einstellungen</h3>
<div class="container-fluid">
    <div class="row p-2" style="font-size: 1.4em">
        <div class="col-xl-4">
            <div class="container-flex">
                <div class="row">
                    <label class="col-xs-2" for="checked">Bevorzugt mit PV-Strom laden</label>
                    <div class="col-xs-10">
@*                        <SfSwitch id="checked" @bind-Checked="@ChargingControlDataPoints.AutomaticCharging.CurrentValue" @oncuechange="(e => { settings.automaticCharging = !settings.automaticCharging; ApplySettings(); })"></SfSwitch>*@ 
                          <SfSwitch id="checked" @bind-Checked="@settings.automaticCharging" ></SfSwitch>
                    </div>
                </div>
                <div class="row @(settings.automaticCharging?"":"disabled")">
                    <label class="col-xs-2" for="MinPV">Mindestanteil PV-Strom</label>
                    <div class="col-xs-10">
                        <SfSlider ID="MinPV"
                                  TValue="double"
                                  @bind-Value="@settings.minimumPVShare"
                                  Type=SliderType.MinRange
                                  Min="0"
                                  Max="100"
                                  Step="10"
                                  Width="70%">
                            @*<SliderEvents TValue="double" OnChange="@(e => { settings.minimumPVShare = e.Value; })" />*@
                        </SfSlider>
                        <div class="dataViz">@settings.minimumPVShare %</div>
                    </div>
                </div>
                <div class="row @(settings.automaticCharging?"disabled":"")">
                    <label class="col-xs-2" for="ManCurrency">Manueller Lade-Strom</label>
                    <div class="col-xs-10">
                        <SfSlider ID="ManCurrency"
                                  TValue="double"
                                  @bind-Value="@settings.manualCurrency"
                                  Type=SliderType.MinRange
                                  Min="0"
                                  Max="16"
                                  Step="1"
                                  Width="70%">
                        </SfSlider>
                        <div class="dataViz">@settings.manualCurrency A</div>
                    </div>
                </div>
                <div class="row">
                    <Button class="btn-primary" @onclick="ApplySettings">Einstellungen aktivieren</Button>
                </div>
            </div>
        </div>
        <div class="col-xl-1">
        </div>
        <div class="col-xl-4">
            Berechnung
            <div class="container" style="font-size:1rem">
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.GridSupply"></DataValueGridRowControl>
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.GridDemand"></DataValueGridRowControl>
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.GridSaldo" CssClass="sum"></DataValueGridRowControl>
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.CurrentChargingPower" CssClass="gap"></DataValueGridRowControl>
@*                <DataValueGridRowControl DataPoint="@ChargingDataPoints..CalculatedChargingPower"></DataValueGridRowControl>
*@                <DataValueGridRowControl DataPoint="@ChargingDataPoints.CurrentVoltage"></DataValueGridRowControl>
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.AdjustedCharingCurrency" CssClass="sum"></DataValueGridRowControl>
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.ManualChargingCurrency" CssClass="@(settings.automaticCharging?"disabled":"")"></DataValueGridRowControl>
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.MinimumActivationPVCurrency" CssClass="@(settings.automaticCharging?"":"disabled")"></DataValueGridRowControl>
                <DataValueGridRowControl DataPoint="@ChargingDataPoints.EffectiveMaximumChargingCurrency" CssClass="sum"></DataValueGridRowControl>
@*                <DataValueGridRowControl DataPoint="@ChargingDataPoints.Cur"></DataValueGridRowControl>
*@            </div>
        </div>
    </div>
</div>
<h2>Ladesäule</h2>
<div class="row">
    <div class="col">
        <CircularGaugeControl DataPoint="@ChargingDataPoints.CurrentChargingPower" Color="#009900"></CircularGaugeControl>
    </div>
    <div class="col">
        <CircularGaugeControl DataPoint="@ChargingDataPoints.ConsumptionActiveSession" Color="#009900"></CircularGaugeControl>
    </div>
    <div class="col">
        <CircularGaugeControl DataPoint="@ChargingDataPoints.EffectiveMaximumChargingCurrency" Color="#009900"></CircularGaugeControl>
    </div>
    <div class="col">
        <div class="container">
            <div class="row">
                <div class="col">
                    <DataValueControl DataPoint="@ChargingDataPoints.CharingOverallTotal" Label="Ladung Gesamt"></DataValueControl>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <StatusControl DataPoint="@ChargingDataPoints.KebaStatus" Label="Status" Status="@kebaStatus"></StatusControl>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private Dictionary<int, string> kebaStatus = new() { { 0, "Warten" }, { 1, "Nicht bereit" }, { 2, "Bereit" }, { 3, "Laden" }, { 4, "Fehler" }, { 5, "Unterbrochen" } };

    public ChargingDataPoints ChargingDataPoints = new ChargingDataPoints();


    private Timer refreshTimer;
    private ChargingSettingsData settings = new();

    protected override void OnInitialized()
    {
        refreshTimer = new Timer(Refresh, null, 1000, 1000);
    }

    public void ApplySettings()
    {
        HttpClient Http = new HttpClient();
        //string baseUrl = "http://localhost:5005";
        //var content = new HttpContent
        //var jsonString = Http.PostAsync($"{baseUrl}/applychargingsettings", content).Result;
        //ChargingControlDataPoints = JsonConvert.DeserializeObject<ChargingControlDataPoints>(jsonString);
        //InvokeAsync(StateHasChanged);

        //var settings = new ChargingSettingsData
        //    {
        //        automaticCharging = ChargingControlDataPoints.AutomaticCharging.CurrentValue,
        //        minimumPVShare = ChargingControlDataPoints.MinimumPVShare.CurrentValue,
        //        manualCurrency = ChargingControlDataPoints.ManualChargingCurrency.CurrentValue
        //    };
        Http.PostAsJsonAsync("http://localhost:5004/applychargingsettings", settings);
    }

    private void Refresh(object? state)
    {
        if (!settings.isInitialized)
        {
            try
            {
                HttpClient Http = new HttpClient();
                var jsonString = Http.GetStringAsync("http://localhost:5004/readchargingsettings").Result;
                settings = JsonConvert.DeserializeObject<ChargingSettingsData>(jsonString);
                settings.isInitialized = true;
                int i = 0;
            }
            catch (Exception ex)
            {
                Debug.WriteLine("Failed to read charging settings from service, Error: " + ex.Message);
            }
        }

        try
        {
            HttpClient Http = new HttpClient();
            var jsonString = Http.GetStringAsync("http://localhost:5004/readdata").Result;
            ChargingDataPoints = JsonConvert.DeserializeObject<ChargingDataPoints>(jsonString);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            ConsoleHelpers.PrintErrorMessage("Failed to read data from service, Error: " + ex.Message);
        }
    }

    public string AssembleValueString(DecimalDataPoint dataPoint)
    {
        string format = "0." + new String('0', dataPoint.DecimalDigits);

        return $"{dataPoint.CurrentValue.ToString(format)} {dataPoint.Unit}";
    }
}

<style>
    .dataViz {
        font-size: 14px;
        height: 24px;
        width: 70px;
        text-align: center;
        line-height: 24px;
        float: right;
        color: #FFFFFF;
        font-weight: 500;
        border-radius: 18px;
        background-color: #0d6efd;
    }

    .disabled {
        pointer-events: none;
        opacity: 30%;
    }

    .sum {
        border-top: 1px solid #000000;
        border-bottom: 1px solid #000000;
    }

    .gap {
        margin-top: 15px;
    }
</style>
